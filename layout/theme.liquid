<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="preconnect" href="https://cdn.shopify.com" crossorigin>
    <meta name="robots" content="noindex">
    <title>
      {{ page_title }}
    </title>

    {{ content_for_header }}

    {% comment %}
      Should redirect if the template is defined (will be undefined for app proxies like /apps|a|community|tools/*)
    {% endcomment %}
    {%- assign should_redirect = template != blank -%}

    {%- if settings.storefront_hostname != blank and should_redirect -%}
      <link rel="canonical" href="https://{{ settings.storefront_hostname }}{{ request.path }}">
    {% else %}
      <link rel="canonical" href="{{ canonical_url }}">
    {% endif %}

    {%- if settings.storefront_hostname != blank and should_redirect -%}
      <script>
        function getCookie(name) {
          name = name + '=';
          var decodedCookie = decodeURIComponent(document.cookie);
          var cookies = decodedCookie.split(';');
          for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i].trim();
            if (cookie.indexOf(name) == 0) {
              return cookie.substring(name.length, cookie.length);
            }
          }
        }
      
        function deleteCookie(name) {
          document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }
      
        if (
          !window.Shopify.designMode &&
          window.location.pathname !== '/checkpoint' &&
          window.location.pathname !== '/throttle/queue' &&
          window.location.pathname !== '/challenge' &&
          !window.location.pathname.startsWith('/account/tools/recurring')
        ) {
          var currentHostname = window.location.hostname;
          var storefrontHostname = "{{ settings.storefront_hostname }}";
      
          if (currentHostname !== storefrontHostname) {
            var redirectUrl = window.location.href.replace(currentHostname, storefrontHostname);
      
            var customRedirectsStr = "{{ settings.custom_redirects | newline_to_br | strip_newlines | replace: ' ', '' }}";
            if (customRedirectsStr) {
              var customRedirects = customRedirectsStr.split('<br/>');
      
              for (var cri = 0; cri < customRedirects.length; cri += 1) {
                var redirect = customRedirects[cri].split('>');
                var fromPath = redirect[0];
                var toPath = redirect[1];
      
                if (fromPath && toPath && redirectUrl.startsWith('https://' + storefrontHostname + fromPath)) {
                  redirectUrl = redirectUrl.replace(storefrontHostname + fromPath, storefrontHostname + toPath);
                  break;
                }
              }
            }
      
            redirectUrl = new URL(redirectUrl);
      
            {%- if settings.integrate_with_customer_accounts and customer != null -%}
              redirectUrl.searchParams.append('logged_in', 'true');
      
              {%- if customer.current_location != null -%}
                redirectUrl.searchParams.append('company_location_id', '{{ customer.current_location.id }}');
              {%- endif -%}
            {%- endif -%}
      
            var discountCode = getCookie('discount_code');
            if (discountCode) {
              redirectUrl.searchParams.append("discount", discountCode);
              deleteCookie("discount_code");
            }
            window.storefrontRedirectUrl = redirectUrl;
            window.location.replace(redirectUrl);
          }
        }
      </script>
    {%- endif -%}

    <style>
      body {
        margin: 0;
        font-family: system-ui;
        box-sizing: border-box;
        padding: clamp(1em, 5vw, 5em);
        min-height: 100vh;
        display: grid;
        grid-template-rows: auto 1fr auto;
        line-height: 1.5;
      }
      h1 {
        color: inherit;
        font-size: 1em;
      }
      h1 > a {
        text-decoration: none;
        color: inherit;
      }
      p {
        max-width: 65ch;
      }
      footer {
        opacity: 0.55;
      }
      @media (prefers-color-scheme: dark) {
        body {
          color: #191818;
          background: #E7EBEB;
        }
        a {
          color: #191818;
        }
        a:visited {
          color: #191818;
        }
        h1 > a,
        h1 > a:visited {
          color: #191818;
        }
      }
    </style>
    <script>
      (function() {
    // Function to update the button's URL and text
    function updateButton(button) {
        // Update the button's URL
        const onclickAttr = button.getAttribute('onclick');
        if (onclickAttr && onclickAttr.includes('https://mauinuivenison.com')) {
            // Replace the old domain with the new one
            const updatedOnclick = onclickAttr.replace(
                'https://mauinuivenison.com',
                'https://checkout.mauinuivenison.com'
            );
            button.setAttribute('onclick', updatedOnclick);
            console.log('Button URL updated to checkout.mauinuivenison.com');
        }
    
        // Update the button's text
        button.textContent = 'Choose You Flavors';
        console.log('Button text updated to "choose your flavors"');
    }
    
    // Function to handle mutations observed in the DOM
    function handleMutations(mutationsList) {
        for (const mutation of mutationsList) {
            // Only process added nodes
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach(node => {
                    // Ensure the node is an element
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        // If the added node is the button, update it
                        if (node.matches('button.qa-button')) {
                            updateButton(node);
                        }
                        // Also check if the button is within the subtree of the added node
                        node.querySelectorAll && node.querySelectorAll('button.qa-button').forEach(updateButton);
                    }
                });
            }
        }
    }

    // Initial check in case the button is already present
    function initialButtonCheck() {
        const buttons = document.querySelectorAll('button.qa-button');
        buttons.forEach(updateButtonURL);
    }

    // Set up the MutationObserver to watch for changes in the DOM
    function setupMutationObserver() {
        const observer = new MutationObserver(handleMutations);
        observer.observe(document.body, { childList: true, subtree: true });
    }

    // Initialize the script after the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', () => {
        initialButtonCheck();      // Check existing buttons
        setupMutationObserver();   // Start observing for new buttons
    });
})();
    </script>
  </head>
  <body>
    {%- if should_redirect -%}
      <div class="redirect">
        {%- if settings.storefront_hostname != blank -%}
          <h1>Redirecting...</h1>
          <p>
            <a id="redirect-link" href="https://{{ settings.storefront_hostname }}/">Click here</a>
            if you are not automically redirected.
          </p>
          <script>
            if (!window.Shopify.designMode) {
              var redirectLink = document.getElementById('redirect-link');
              redirectLink.href = window.storefrontRedirectUrl;
            }
          </script>
        {%- else -%}
          <h1>Redirect URL not set</h1>
          <p>Configure the redirects in "Theme settings > Storefront".</p>
        {%- endif -%}
      </div>
    {%- endif -%}
    {{ content_for_layout }}
    <a href="https://mauinuivenison.com/account/home" style="margin-top: 10px;">Return to the Store</a>
  </body>
</html>
